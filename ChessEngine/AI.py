CHECKMATE = 100000
STALEMATE = 0
DEPTH = 3


# score of piece = piece personal score - positional score on board
piece_scores = {
    "wK": [
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 2, 900 - 3, 900 - 3, 900 - 4, 900 - 4, 900 - 3, 900 - 3, 900 - 2],
        [900 - 1, 900 - 2, 900 - 2, 900 - 2, 900 - 2, 900 - 2, 900 - 2, 900 - 1],
        [900 + 2, 900 + 2, 900 + 0, 900 + 0, 900 + 0, 900 + 0, 900 + 2, 900 + 2],
        [900 + 2, 900 + 3, 900 + 1, 900 + 0, 900 + 0, 900 + 1, 900 + 3, 900 + 2]
    ],
    "bK": [
        [900 + 2, 900 + 3, 900 + 1, 900 + 0, 900 + 0, 900 + 1, 900 + 3, 900 + 2],
        [900 + 2, 900 + 2, 900 + 0, 900 + 0, 900 + 0, 900 + 0, 900 + 2, 900 + 2],
        [900 - 1, 900 - 2, 900 - 2, 900 - 2, 900 - 2, 900 - 2, 900 - 2, 900 - 1],
        [900 - 2, 900 - 3, 900 - 3, 900 - 4, 900 - 4, 900 - 3, 900 - 3, 900 - 2],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3],
        [900 - 3, 900 - 4, 900 - 4, 900 - 5, 900 - 5, 900 - 4, 900 - 4, 900 - 3]
    ],
    "wQ": [
        [90 - 2, 90 - 1, 90 - 1, 90 - .5, 90 - .5, 90 - 1, 90 - 1, 90 - 2],
        [90 - 1, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 1],
        [90 - 1, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - 1],
        [90 - .5, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - .5],
        [90 - 0, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - .5],
        [90 - 1, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - 1],
        [90 - 1, 90 - 0, 90 + .5, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 1],
        [90 - 2, 90 - 1, 90 - 1, 90 - .5, 90 - .5, 90 - 1, 90 - 1, 90 - 2]
    ],
    "bQ": [
        [90 - 2, 90 - 1, 90 - 1, 90 - .5, 90 - .5, 90 - 1, 90 - 1, 90 - 2],
        [90 - 1, 90 - 0, 90 + 0, 90 - 0, 90 - 0, 90 + .5, 90 - 0, 90 - 1],
        [90 - 1, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 1],
        [90 - .5, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - 0],
        [90 - .5, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - .5],
        [90 - 1, 90 - 0, 90 + .5, 90 + .5, 90 + .5, 90 + .5, 90 - 0, 90 - 1],
        [90 - 1, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 0, 90 - 1],
        [90 - 2, 90 - 1, 90 - 1, 90 - .5, 90 - .5, 90 - 1, 90 - 1, 90 - 2]
    ],
    "wR": [
        [50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0],
        [50 + .5, 50 + 1, 50 + 1, 50 + 1, 50 + 1, 50 + 1, 50 + 1, 50 + .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 + 0, 50 + 0, 50 + 0, 50 + .5, 50 + .5, 50 + 0, 50 + 0, 50 + 0]
    ],
    "bR": [
        [50 + 0, 50 + 0, 50 + 0, 50 + .5, 50 + .5, 50 + 0, 50 + 0, 50 + 0],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 - .5, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 - .5],
        [50 + .5, 50 + 1, 50 + 1, 50 + 1, 50 + 1, 50 + 1, 50 + 1, 50 + .5],
        [50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0, 50 + 0]
    ],
    "wB": [
        [30 - 2, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 2],
        [30 - 1, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 1],
        [30 - 1, 30 - 0, 30 + .5, 30 + 1, 30 + 1, 30 + .5, 30 - 0, 30 - 1],
        [30 - 1, 30 + .5, 30 + .5, 30 + 1, 30 + 1, 30 + .5, 30 + .5, 30 - 1],
        [30 - 1, 30 - 0, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 - 0, 30 - 1],
        [30 - 1, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 - 1],
        [30 - 1, 30 + .5, 30 + 0, 30 + 0, 30 + 0, 30 + 0, 30 + .5, 30 - 1],
        [30 - 2, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 2]
    ],
    "bB": [
        [30 - 2, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 2],
        [30 - 1, 30 + .5, 30 + 0, 30 + 0, 30 + 0, 30 + 0, 30 + .5, 30 - 1],
        [30 + 2, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 + 2],
        [30 - 1, 30 - 0, 30 + 1, 30 + 1, 30 + 1, 30 + 1, 30 - 0, 30 - 1],
        [30 - 1, 30 + .5, 30 + .5, 30 + 1, 30 + 1, 30 + .5, 30 + .5, 30 - 1],
        [30 - 1, 30 - 0, 30 + .5, 30 + 1, 30 + 1, 30 + .5, 30 - 0, 30 - 1],
        [30 - 1, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 1],
        [30 - 2, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 1, 30 - 2]
    ],
    "wN": [
        [30 - 5, 30 - 4, 30 - 3, 30 - 3, 30 - 3, 30 - 3, 30 - 4, 30 - 5],
        [30 - 4, 30 - 2, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 2, 30 - 4],
        [30 - 3, 30 - 0, 30 + 1, 30 + 1.5, 30 + 1.5, 30 + 1, 30 + 0, 30 - 3],
        [30 - 3, 30 + .5, 30 + 1.5, 30 + 2, 30 + 2, 30 + 1.5, 30 + .5, 30 - 3],
        [30 - 3, 30 + 0, 30 + 1.5, 30 + 2, 30 + 2, 30 + 1.5, 30 + 0, 30 - 3],
        [30 - 3, 30 + .5, 30 + 1, 30 + 1.5, 30 + 1.5, 30 + 1, 30 + .5, 30 - 3],
        [30 - 4, 30 - 2, 30 - 0, 30 + .5, 30 + .5, 30 + 0, 30 - 2, 30 - 4],
        [30 - 5, 30 - 4, 30 - 3, 30 - 3, 30 - 3, 30 - 3, 30 - 4, 30 - 5]
    ],
    "bN": [
        [30 - 5, 30 - 4, 30 - 3, 30 - 3, 30 - 3, 30 - 3, 30 - 4, 30 - 5],
        [30 - 4, 30 - 2, 30 - 0, 30 + .5, 30 + .5, 30 + 0, 30 - 2, 30 - 4],
        [30 - 3, 30 + .5, 30 + 1, 30 + 1.5, 30 + 1.5, 30 + 1, 30 + .5, 30 - 3],
        [30 - 3, 30 + 0, 30 + 1.5, 30 + 2, 30 + 2, 30 + 1.5, 30 + 0, 30 - 3],
        [30 - 3, 30 + .5, 30 + 1.5, 30 + 2, 30 + 2, 30 + 1.5, 30 + .5, 30 - 3],
        [30 - 3, 30 - 0, 30 + 1, 30 + 1.5, 30 + 1.5, 30 + 1, 30 + 0, 30 - 3],
        [30 - 4, 30 - 2, 30 - 0, 30 - 0, 30 - 0, 30 - 0, 30 - 2, 30 - 4],
        [30 - 5, 30 - 4, 30 - 3, 30 - 3, 30 - 3, 30 - 3, 30 - 4, 30 - 5]
    ],
    "wP": [
        [10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0],
        [10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5],
        [10 + 1, 10 + 1, 10 + 2, 10 + 3, 10 + 3, 10 + 2, 10 + 1, 10 + 1],
        [10 + .5, 10 + .5, 10 + 1, 10 + 2.5, 10 + 2.5, 10 + 1, 10 + .5, 10 + .5],
        [10 - 0, 10 - 0, 10 - 0, 10 + 2, 10 + 2, 10 - 0, 10 - 0, 10 - 0],
        [10 + .5, 10 - .5, 10 - 1, 10 - 0, 10 - 0, 10 - 1, 10 - .5, 10 + .5],
        [10 - 1, 10 + .5, 10 - 0, 10 - 0, 10 - 0, 10 - 0, 10 + .5, 10 - 1],
        [10 - 2, 10 - 1, 10 - 1, 10 - 1, 10 - 1, 10 - 1, 10 - 1, 10 - 2]
    ],
    "bP": [
        [10 - 2, 10 - 1, 10 - 1, 10 - 1, 10 - 1, 10 - 1, 10 - 1, 10 - 2],
        [10 - 1, 10 + .5, 10 - 0, 10 - 0, 10 - 0, 10 - 0, 10 + .5, 10 - 1],
        [10 + .5, 10 + 2, 10 - 1, 10 - 0, 10 - 0, 10 - 1, 10 + 2, 10 + .5],
        [10 - 0, 10 - 0, 10 - 0, 10 + 2, 10 + 2, 10 - 0, 10 - 0, 10 - 0],
        [10 + .5, 10 + .5, 10 + 1, 10 + 2.5, 10 + 2.5, 10 + 1, 10 + .5, 10 + .5],
        [10 + 1, 10 + 1, 10 + 2, 10 + 3, 10 + 3, 10 + 2, 10 + 1, 10 + 1],
        [10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5, 10 + 5],
        [10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0, 10 + 0]
    ],
    "__": [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0]
    ]
}


def find_best_move(game_state, valid_moves):
    global best_move
    best_move = None
    mini_max(game_state, valid_moves, DEPTH, -CHECKMATE, CHECKMATE,
             True)
    return best_move


def mini_max(game_state, valid_moves, depth, alpha, beta, is_AI_move):
    global best_move

    if depth == 0:
        return board_score(game_state)

    if is_AI_move:
        min_score = float('inf')
        valid_moves.sort(
            key=lambda x: piece_scores[x.piece_captured][x.end_row][x.end_column])
        valid_moves.reverse()
        for move in valid_moves:
            game_state.make_move(move)
            next_moves = game_state.get_valid_moves()
            score = mini_max(game_state, next_moves,
                             depth - 1, alpha, beta, False)
            if score < min_score:
                min_score = score
                best_move = move if DEPTH == depth else best_move
            game_state.undo_move()
            beta = min(beta, score)
            if beta <= alpha:
                break
        return min_score
    else:
        max_score = -float('inf')
        valid_moves.sort(key=lambda x: piece_scores[x.piece_captured])
        valid_moves.reverse()
        for move in valid_moves:
            game_state.make_move(move)
            next_moves = game_state.get_valid_moves()
            score = mini_max(game_state, next_moves,
                             depth - 1, alpha, beta, True)
            if score > max_score:
                max_score = score
                best_move = move if DEPTH == depth else best_move
            game_state.undo_move()
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return max_score


def board_score(game_state):
    if game_state.check_mate:
        if game_state.is_white_move:
            return CHECKMATE
        else:
            return -CHECKMATE

    if game_state.stale_mate:
        return STALEMATE

    board = game_state.board
    score = 0
    for row in range(len(board)):
        for column in range(len(board[row])):
            if board[row][column] != "__":
                if board[row][column][0] == "w":
                    score += piece_scores[board[row][column]][row][column]
                else:
                    score -= piece_scores[board[row][column]][row][column]
    return score
